const INFO = '// Generated by generate-dts';

const IGNORES = [
  '/* eslint-disable */',
  '/* prettier-ignore */',
  '// @ts-nocheck',
  '// noinspection JSUnusedGlobalSymbols',
].join('\n');

export type CreateDtsOptions = Partial<{
  defaultType: string;
}>;

export const createDts = (
  name: string,
  object: object,
  options = {} as CreateDtsOptions,
) => {
  const body = createItem(object, 4, defaultOptions(options));

  return `${INFO}
${IGNORES}
export {}
declare global {
  export interface ${name} ${body}
}`;
};

const defaultOptions = (options: CreateDtsOptions) => ({
  defaultType: options.defaultType || 'any',
});

const createItem = <T>(
  object: T,
  space: number,
  options: CreateDtsOptions,
): string => {
  const spaceString = ' '.repeat(space);
  const result = ['{'];

  for (const name in object) {
    const value = object[name];
    const prefix = `${spaceString}${name}: `;

    if (!value) {
      result.push(`${prefix}${options.defaultType}`);
      continue;
    }

    if (typeof value === 'object') {
      result.push(`${prefix}${createItem(value, space + 2, options)}`);
      continue;
    }

    if (isUnionValue(value)) {
      result.push(`${prefix}${getUnionValue(value)}`);
      continue;
    }

    if (isStringValue(value)) {
      result.push(`${prefix}${getStringValue(value)}`);
      continue;
    }

    result.push(`${prefix}${value}`);
  }

  result.push(`${' '.repeat(space - 2)}}`);
  return result.join('\n');
};

const isUnionValue = (value: unknown): value is string =>
  typeof value === 'string' && value.includes('|');
const getUnionValue = (values: string) =>
  values
    .split('|')
    .map(value => value.trim())
    .filter(value => value !== '')
    .map(value => (isStringValue(value) ? getStringValue(value) : value))
    .join(' | ');

const isStringValue = (value: unknown): value is `'${string}'` =>
  typeof value === 'string' && /^['"]?.*['"]$/.test(value);
const getStringValue = (value: string) => `'${value.replace(/['"]/g, '')}'`;
