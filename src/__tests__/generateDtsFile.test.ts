import { describe, it, expect, vi, afterEach } from 'vitest';
import { generateDtsFile } from '..';
import { promises as fs } from 'node:fs';
import { resolve } from 'node:path';

const src = resolve(__dirname, '../');

describe('generateDtsFile', () => {
  afterEach(() => {
    fs.unlink(resolve(src, './__tests__/GenerateDtsFile.d.ts')).catch(() => {});
  });

  it('Common forms', async () => {
    const outputSpy = vi.fn();

    await generateDtsFile({
      name: 'GenerateDtsFile',
      directory: resolve(src, './__tests__'),
      parser: async () => ({ a: 'string', b: 1, c: '"1"' }),
      options: { output: outputSpy },
    });

    expect(outputSpy).toHaveBeenCalledWith(
      `// Generated by google-spreadsheet-dts
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
export {};
declare global {
  export interface GenerateDtsFile {
    a: string;
    b: 1;
    c: '1';
  }
}`,
    );
  });

  it('Write to file', async () => {
    await generateDtsFile({
      name: 'GenerateDtsFile',
      directory: resolve(src, './__tests__'),
      parser: async () => ({ a: 'string', b: 1, c: '"1"' }),
    });

    const dts = (
      await fs.readFile(resolve(src, './__tests__/GenerateDtsFile.d.ts'))
    ).toString();
    expect(dts).toBe(
      `// Generated by google-spreadsheet-dts
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
export {};
declare global {
  export interface GenerateDtsFile {
    a: string;
    b: 1;
    c: '1';
  }
}`,
    );
  });
});
